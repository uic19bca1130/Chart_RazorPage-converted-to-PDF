@page
@using static Chart_RazorP.Models.Employee;

@model Chart_RazorP.Pages.IndexModel;
@{
	ViewData["Title"] = "Home page";
	var name = Model.employee[0].Name;
}

<style>
	/* Add tooltip style */
	.tooltip {
		position: absolute;
		background-color: white;
		border: 1px solid #ccc;
		padding: 8px;
		opacity: 0;
		pointer-events: none;
	}
</style>

<div id="pdfContent">



		<div class="col-sm-6">
			<div class="row">
				<div class="card-header">
					Bar Chart
				</div>

				<div class="row mt-3">
					<div class="col">
						<button id="exportToPdfBtn" class="btn btn-primary">EXPORT TO PDF</button>
					</div>
				</div>

				<div class="card-body">
					<canvas class="" id="bar"> </canvas>
				</div>
			</div>
		</div>
		<div class="col-sm-6">
			<div class="row">
				<div class="card-header">
					Line Chart
				</div>
				<div class="card-body">
					<canvas class="mt-5" id="line"></canvas>
				</div>
				<div class="card-body">
					<svg id="lineChart" ></svg>
				</div>

			</div>
		</div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"> </script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.3/jspdf.min.js"></script>
<!-- Add these scripts to your HTML -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.9.1/d3-tip.min.js"></script>  @*toolltip*@
<script src="https://d3js.org/d3.v7.min.js"></script> @*d3 for SVG graph representation*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/canvg/1.5/canvg.min.js"></script>@* conversion of SVG to Canvas*@

<!-- Include jsPDF library -->


<script type="text/javascript">

	var empName = [];
	var empSalary = [];

	@foreach (var employee in Model.employee)
	{
		<text>
			empName.push('@employee.Name');
		empSalary.push('@employee.Salary');
		</text>
	}

	barchart = document.getElementById('bar');// document.getElementById('bar').getContext('2d');
	debugger
	console.log(barchart);
	new Chart(barchart, {
		type: 'bar',
		data: {
			labels: empName,
			borderColor: "#fffff",
			datasets: [{
				label: 'Salary',
				data: empSalary,
				backgroundColor: ['rgba(6,120,220)', 'rgba(6,120,150)', 'rgba(6,120,80)', 'rgba(6,50,80)'
				]
			}]
		},
		options: {
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true
					}
				}]
			}
		}
	})

	//code for creating line chart using chart

	var linechart = document.getElementById('line');
	debugger;
	var mybarchart = new Chart(linechart, {
		type: 'line',
		data: {
			labels: empName,
			borderColor: "#fffff",
			lineTension: 0,
			datasets: [{
				fill: false,
				label: 'Salary',
				data: empSalary,
				backgroundColor: ['rgba(6,120,220)', 'rgba(6,120,150)', 'rgba(6,120,80)', 'rgba(6,50,80)'
				]
			}]
		},
		options: {
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true,
					}
				}]
			}
		}
	})



	var margin = { top: 20, right: 20, bottom: 30, left: 50 };
	var width = 600 - margin.left - margin.right;
	var height = 400 - margin.top - margin.bottom;

	// Create an SVG element
	var svg = d3.select("#lineChart")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
		.append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	// Create scales
	var x = d3.scaleBand()
		.domain(empName)
		.range([0, width])
		.padding(0.1);

	var y = d3.scaleLinear()
		.domain([0, d3.max(empSalary)])
		.range([height, 0]);

	// Create and draw the line chart
	var line = d3.line()
		.defined(function (d) { return d !== null; }) // Add this line to ignore null values
		.x(function (d, i) { return x(empName[i]) + x.bandwidth() / 2; })
		.y(function (d) { return y(d); });

	svg.append("path")
		.datum(empSalary)
		.attr("class", "line")
		.attr("d", line)
		.attr("fill", "none") // Set fill to none to remove fill color
		.attr("stroke", "green") // Set stroke color to green
		.attr("stroke-width", 2);

	// Add circles for each data point with tooltips
	var tooltip = d3.select("body")
		.append("div")
		.attr("class", "tooltip")
		.style("opacity", 0);

	svg.selectAll(".dot")
		.data(empSalary)
		.enter().append("circle")
		.attr("class", "dot")
		.attr("cx", function (d, i) { return x(empName[i]) + x.bandwidth() / 2; })
		.attr("cy", function (d) { return y(d); })
		.attr("r", 4)
		.attr("fill", "green")
		.on("mouseover", function (d, i) {
			tooltip.transition()
				.duration(200)
				.style("opacity", 0.9);
			tooltip.html("Salary " + i)
				.style("left", (d.pageX) + "px")
				.style("top", (d.pageY - 28) + "px");
		})
		.on("mouseout", function () {
			tooltip.transition()
				.duration(500)
				.style("opacity", 0);
		});

	// Add x-axis
	svg.append("g")
		.attr("transform", "translate(0," + height + ")")
		.call(d3.axisBottom(x));

	// Add y-axis
	svg.append("g")
		.call(d3.axisLeft(y));

	// Add horizontal grid lines
	svg.append("g")
		.attr("class", "grid")
		.call(d3.axisLeft(y)
			.tickSize(-width)
			.tickFormat("")
		)
		.selectAll(".tick line")
		.attr("opacity", 0.3);

	// Add vertical grid lines
	svg.append("g")
		.attr("class", "grid-x")
		.attr("transform", "translate(0," + height + ")")
		.call(d3.axisBottom(x)
			.tickSize(-height)
			.tickFormat("")
		)
		.selectAll(".tick line")
		.attr("opacity", 0.3);

	document.getElementById("exportToPdfBtn").addEventListener("click", async function () {
		// Bar Chart Canvas
		debugger;
		const barCanvas = document.getElementById('bar');
		const barCanvasImage = await html2canvas(barCanvas);
		const barCanvasImageData = barCanvas.toDataURL('image/png');

		//const barCanvas = document.getElementById('bar');
		//const barCanvasImage = await html2canvas(barCanvas);
		//const canvas1 = document.createElement('canvas');
		//const context1 = canvas1.getContext('2d');
		//const scaleFactor1 = 2;
		//const width1 = barCanvasImage.height * scaleFactor1;
		//const height1 = barCanvasImage.width * scaleFactor1;
		//canvas1.width = width1;
		//canvas1.height = height1;

		//const svgString1 = new XMLSerializer().serializeToString(barCanvas);
		//const DOMURL1 = self.URL || self.webkitURL || self;
		//const img1 = new Image();
		//const svgBlob1 = new Blob([svgString1], { type: 'image/svg+xml;charset=utf-8' });
		//const url1 = DOMURL1.createObjectURL(svgBlob1);


		// Line Chart Canvas
		const lineChart = document.getElementById('lineChart');
		const canvas = document.createElement('canvas');
		const context = canvas.getContext('2d');
		const scaleFactor = 4;
		const width = 600 * scaleFactor;
		const height = 400 * scaleFactor;
		canvas.width = width;
		canvas.height = height;

		const svgString = new XMLSerializer().serializeToString(lineChart);
		const DOMURL = self.URL || self.webkitURL || self;
		const img = new Image();
		const svgBlob = new Blob([svgString], { type: 'image/svg+xml;charset=utf-8' });
		const url = DOMURL.createObjectURL(svgBlob);

		img.onload = function () {
			context.drawImage(img, 0, 0, width, height);
			//context.drawImage(img1, 0, 0, width1, height1);
			// Get the data URL of the canvas

			const barChartImageData = canvas1.toDataURL('image/png');
			const lineChartImageData = canvas.toDataURL('image/png');

			// Create PDF
			const pdf = new jsPDF();
			const imgWidth = 170; // A4 page width in mm
			const imgHeight = barCanvasImage.height * imgWidth / barCanvasImage.width;

			// Add title to the first page
			pdf.setFontSize(18);
			pdf.setTextColor(6, 120, 220); // Same blue as in the HTML chart
			pdf.text("Charts and Table Data", imgWidth / 2, 20, { align: 'center' });

			pdf.addImage(barCanvasImageData, 'PNG', 10, 30, imgWidth - 20, imgHeight - 10);
			pdf.addImage(lineChartImageData, 'PNG', 10, imgHeight + 35, imgWidth - 20, imgHeight + 10);

			// Table Data
			const tableData = [
				[1, 'sidhu', '123-456-7890', 'sidhu@example.com', 'test'],
				[2, 'mooseala', '987-654-3210', 'mooseala@example.com', 'test'],
				[3, 'mooseala', '987-654-3210', 'mooseala@example.com', 'test'],
			];

			pdf.text("table 1", imgWidth / 2, 230, { align: 'center' });
			const head = [['ID', 'Name', 'Phone', 'Email', 'Test']];
			const body = tableData;
			const startY = 240;
			pdf.autoTable({
				head: head,
				body: body,
				startY: startY,
				theme: 'grid',
				headStyles: { fillColor: [6, 120, 220], textColor: 255 },
				styles: { textColor: [44, 62, 80] },
			});

			pdf.save("exported-charts.pdf");
		};

		img.src = url;
	});


</script>

